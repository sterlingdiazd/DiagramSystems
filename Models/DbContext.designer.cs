#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NeedOfVigilante.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DiagramsDB")]
	public partial class DbContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComparisonTable(ComparisonTable instance);
    partial void UpdateComparisonTable(ComparisonTable instance);
    partial void DeleteComparisonTable(ComparisonTable instance);
    partial void InsertElementTable(ElementTable instance);
    partial void UpdateElementTable(ElementTable instance);
    partial void DeleteElementTable(ElementTable instance);
    partial void InsertOfficeTable(OfficeTable instance);
    partial void UpdateOfficeTable(OfficeTable instance);
    partial void DeleteOfficeTable(OfficeTable instance);
    partial void InsertOperatorTable(OperatorTable instance);
    partial void UpdateOperatorTable(OperatorTable instance);
    partial void DeleteOperatorTable(OperatorTable instance);
    partial void InsertOutcomeTable(OutcomeTable instance);
    partial void UpdateOutcomeTable(OutcomeTable instance);
    partial void DeleteOutcomeTable(OutcomeTable instance);
    partial void InsertRangeTable(RangeTable instance);
    partial void UpdateRangeTable(RangeTable instance);
    partial void DeleteRangeTable(RangeTable instance);
    partial void InsertExpressionTypeTable(ExpressionTypeTable instance);
    partial void UpdateExpressionTypeTable(ExpressionTypeTable instance);
    partial void DeleteExpressionTypeTable(ExpressionTypeTable instance);
    partial void InsertAlphabheticBooleanTable(AlphabheticBooleanTable instance);
    partial void UpdateAlphabheticBooleanTable(AlphabheticBooleanTable instance);
    partial void DeleteAlphabheticBooleanTable(AlphabheticBooleanTable instance);
    partial void InsertNumericValueTable(NumericValueTable instance);
    partial void UpdateNumericValueTable(NumericValueTable instance);
    partial void DeleteNumericValueTable(NumericValueTable instance);
    partial void InsertResultsTable(ResultsTable instance);
    partial void UpdateResultsTable(ResultsTable instance);
    partial void DeleteResultsTable(ResultsTable instance);
    partial void InsertQuestionTable(QuestionTable instance);
    partial void UpdateQuestionTable(QuestionTable instance);
    partial void DeleteQuestionTable(QuestionTable instance);
    partial void InsertDiagramTable(DiagramTable instance);
    partial void UpdateDiagramTable(DiagramTable instance);
    partial void DeleteDiagramTable(DiagramTable instance);
    partial void InsertDiagramOfficeTable(DiagramOfficeTable instance);
    partial void UpdateDiagramOfficeTable(DiagramOfficeTable instance);
    partial void DeleteDiagramOfficeTable(DiagramOfficeTable instance);
    partial void InsertLogException(LogException instance);
    partial void UpdateLogException(LogException instance);
    partial void DeleteLogException(LogException instance);
    partial void InsertOperationLog(OperationLog instance);
    partial void UpdateOperationLog(OperationLog instance);
    partial void DeleteOperationLog(OperationLog instance);
    partial void InsertHistoricTable(HistoricTable instance);
    partial void UpdateHistoricTable(HistoricTable instance);
    partial void DeleteHistoricTable(HistoricTable instance);
    #endregion
		
		public DbContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DiagramsDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ComparisonTable> ComparisonTables
		{
			get
			{
				return this.GetTable<ComparisonTable>();
			}
		}
		
		public System.Data.Linq.Table<ElementTable> ElementTables
		{
			get
			{
				return this.GetTable<ElementTable>();
			}
		}
		
		public System.Data.Linq.Table<OfficeTable> OfficeTables
		{
			get
			{
				return this.GetTable<OfficeTable>();
			}
		}
		
		public System.Data.Linq.Table<OperatorTable> OperatorTables
		{
			get
			{
				return this.GetTable<OperatorTable>();
			}
		}
		
		public System.Data.Linq.Table<OutcomeTable> OutcomeTables
		{
			get
			{
				return this.GetTable<OutcomeTable>();
			}
		}
		
		public System.Data.Linq.Table<RangeTable> RangeTables
		{
			get
			{
				return this.GetTable<RangeTable>();
			}
		}
		
		public System.Data.Linq.Table<ExpressionTypeTable> ExpressionTypeTables
		{
			get
			{
				return this.GetTable<ExpressionTypeTable>();
			}
		}
		
		public System.Data.Linq.Table<AlphabheticBooleanTable> AlphabheticBooleanTables
		{
			get
			{
				return this.GetTable<AlphabheticBooleanTable>();
			}
		}
		
		public System.Data.Linq.Table<NumericValueTable> NumericValueTables
		{
			get
			{
				return this.GetTable<NumericValueTable>();
			}
		}
		
		public System.Data.Linq.Table<ResultsTable> ResultsTables
		{
			get
			{
				return this.GetTable<ResultsTable>();
			}
		}
		
		public System.Data.Linq.Table<QuestionTable> QuestionTables
		{
			get
			{
				return this.GetTable<QuestionTable>();
			}
		}
		
		public System.Data.Linq.Table<DiagramTable> DiagramTables
		{
			get
			{
				return this.GetTable<DiagramTable>();
			}
		}
		
		public System.Data.Linq.Table<DiagramOfficeTable> DiagramOfficeTables
		{
			get
			{
				return this.GetTable<DiagramOfficeTable>();
			}
		}
		
		public System.Data.Linq.Table<LogException> LogExceptions
		{
			get
			{
				return this.GetTable<LogException>();
			}
		}
		
		public System.Data.Linq.Table<OperationLog> OperationLogs
		{
			get
			{
				return this.GetTable<OperationLog>();
			}
		}
		
		public System.Data.Linq.Table<HistoricTable> HistoricTables
		{
			get
			{
				return this.GetTable<HistoricTable>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fn_GetResultado", IsComposable=true)]
		public string fn_GetResultado([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string codigoOficina, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string tipoElemento, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string textoElemento)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), codigoOficina, tipoElemento, textoElemento).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fn_GetResultFromDiagramQuestion", IsComposable=true)]
		public string fn_GetResultFromDiagramQuestion([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string idQuestion, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string idOffice, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string category)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idQuestion, idOffice, category).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComparisonTable")]
	public partial class ComparisonTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private decimal _unknownValue;
		
		private int _idComparisonOperator;
		
		private decimal _knownValue;
		
		private EntityRef<OperatorTable> _OperatorTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnunknownValueChanging(decimal value);
    partial void OnunknownValueChanged();
    partial void OnidComparisonOperatorChanging(int value);
    partial void OnidComparisonOperatorChanged();
    partial void OnknownValueChanging(decimal value);
    partial void OnknownValueChanged();
    #endregion
		
		public ComparisonTable()
		{
			this._OperatorTable = default(EntityRef<OperatorTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unknownValue", DbType="Decimal(18,2) NOT NULL")]
		public decimal unknownValue
		{
			get
			{
				return this._unknownValue;
			}
			set
			{
				if ((this._unknownValue != value))
				{
					this.OnunknownValueChanging(value);
					this.SendPropertyChanging();
					this._unknownValue = value;
					this.SendPropertyChanged("unknownValue");
					this.OnunknownValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idComparisonOperator", DbType="Int NOT NULL")]
		public int idComparisonOperator
		{
			get
			{
				return this._idComparisonOperator;
			}
			set
			{
				if ((this._idComparisonOperator != value))
				{
					if (this._OperatorTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidComparisonOperatorChanging(value);
					this.SendPropertyChanging();
					this._idComparisonOperator = value;
					this.SendPropertyChanged("idComparisonOperator");
					this.OnidComparisonOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_knownValue", DbType="Decimal(18,2) NOT NULL")]
		public decimal knownValue
		{
			get
			{
				return this._knownValue;
			}
			set
			{
				if ((this._knownValue != value))
				{
					this.OnknownValueChanging(value);
					this.SendPropertyChanging();
					this._knownValue = value;
					this.SendPropertyChanged("knownValue");
					this.OnknownValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatorTable_ComparisonTable", Storage="_OperatorTable", ThisKey="idComparisonOperator", OtherKey="id", IsForeignKey=true)]
		public OperatorTable OperatorTable
		{
			get
			{
				return this._OperatorTable.Entity;
			}
			set
			{
				OperatorTable previousValue = this._OperatorTable.Entity;
				if (((previousValue != value) 
							|| (this._OperatorTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperatorTable.Entity = null;
						previousValue.ComparisonTables.Remove(this);
					}
					this._OperatorTable.Entity = value;
					if ((value != null))
					{
						value.ComparisonTables.Add(this);
						this._idComparisonOperator = value.id;
					}
					else
					{
						this._idComparisonOperator = default(int);
					}
					this.SendPropertyChanged("OperatorTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ElementTable")]
	public partial class ElementTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idDiagram;
		
		private int _idPregunta;
		
		private EntityRef<OutcomeTable> _OutcomeTable;
		
		private EntityRef<QuestionTable> _QuestionTable;
		
		private EntityRef<DiagramTable> _DiagramTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidDiagramChanging(int value);
    partial void OnidDiagramChanged();
    partial void OnidPreguntaChanging(int value);
    partial void OnidPreguntaChanged();
    #endregion
		
		public ElementTable()
		{
			this._OutcomeTable = default(EntityRef<OutcomeTable>);
			this._QuestionTable = default(EntityRef<QuestionTable>);
			this._DiagramTable = default(EntityRef<DiagramTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDiagram", DbType="Int NOT NULL")]
		public int idDiagram
		{
			get
			{
				return this._idDiagram;
			}
			set
			{
				if ((this._idDiagram != value))
				{
					if (this._DiagramTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDiagramChanging(value);
					this.SendPropertyChanging();
					this._idDiagram = value;
					this.SendPropertyChanged("idDiagram");
					this.OnidDiagramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPregunta", DbType="Int NOT NULL")]
		public int idPregunta
		{
			get
			{
				return this._idPregunta;
			}
			set
			{
				if ((this._idPregunta != value))
				{
					if (this._QuestionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPreguntaChanging(value);
					this.SendPropertyChanging();
					this._idPregunta = value;
					this.SendPropertyChanged("idPregunta");
					this.OnidPreguntaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElementTable_OutcomeTable", Storage="_OutcomeTable", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public OutcomeTable OutcomeTable
		{
			get
			{
				return this._OutcomeTable.Entity;
			}
			set
			{
				OutcomeTable previousValue = this._OutcomeTable.Entity;
				if (((previousValue != value) 
							|| (this._OutcomeTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OutcomeTable.Entity = null;
						previousValue.ElementTable = null;
					}
					this._OutcomeTable.Entity = value;
					if ((value != null))
					{
						value.ElementTable = this;
					}
					this.SendPropertyChanged("OutcomeTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionTable_ElementTable", Storage="_QuestionTable", ThisKey="idPregunta", OtherKey="Id", IsForeignKey=true)]
		public QuestionTable QuestionTable
		{
			get
			{
				return this._QuestionTable.Entity;
			}
			set
			{
				QuestionTable previousValue = this._QuestionTable.Entity;
				if (((previousValue != value) 
							|| (this._QuestionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionTable.Entity = null;
						previousValue.ElementTables.Remove(this);
					}
					this._QuestionTable.Entity = value;
					if ((value != null))
					{
						value.ElementTables.Add(this);
						this._idPregunta = value.Id;
					}
					else
					{
						this._idPregunta = default(int);
					}
					this.SendPropertyChanged("QuestionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DiagramTable_ElementTable", Storage="_DiagramTable", ThisKey="idDiagram", OtherKey="id", IsForeignKey=true)]
		public DiagramTable DiagramTable
		{
			get
			{
				return this._DiagramTable.Entity;
			}
			set
			{
				DiagramTable previousValue = this._DiagramTable.Entity;
				if (((previousValue != value) 
							|| (this._DiagramTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DiagramTable.Entity = null;
						previousValue.ElementTables.Remove(this);
					}
					this._DiagramTable.Entity = value;
					if ((value != null))
					{
						value.ElementTables.Add(this);
						this._idDiagram = value.id;
					}
					else
					{
						this._idDiagram = default(int);
					}
					this.SendPropertyChanged("DiagramTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OfficeTable")]
	public partial class OfficeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IdOficina;
		
		private string _Oficina;
		
		private EntitySet<DiagramOfficeTable> _DiagramOfficeTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdOficinaChanging(string value);
    partial void OnIdOficinaChanged();
    partial void OnOficinaChanging(string value);
    partial void OnOficinaChanged();
    #endregion
		
		public OfficeTable()
		{
			this._DiagramOfficeTables = new EntitySet<DiagramOfficeTable>(new Action<DiagramOfficeTable>(this.attach_DiagramOfficeTables), new Action<DiagramOfficeTable>(this.detach_DiagramOfficeTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdOficina", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IdOficina
		{
			get
			{
				return this._IdOficina;
			}
			set
			{
				if ((this._IdOficina != value))
				{
					this.OnIdOficinaChanging(value);
					this.SendPropertyChanging();
					this._IdOficina = value;
					this.SendPropertyChanged("IdOficina");
					this.OnIdOficinaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Oficina", DbType="VarChar(100)")]
		public string Oficina
		{
			get
			{
				return this._Oficina;
			}
			set
			{
				if ((this._Oficina != value))
				{
					this.OnOficinaChanging(value);
					this.SendPropertyChanging();
					this._Oficina = value;
					this.SendPropertyChanged("Oficina");
					this.OnOficinaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OfficeTable_DiagramOfficeTable", Storage="_DiagramOfficeTables", ThisKey="IdOficina", OtherKey="idOffice")]
		public EntitySet<DiagramOfficeTable> DiagramOfficeTables
		{
			get
			{
				return this._DiagramOfficeTables;
			}
			set
			{
				this._DiagramOfficeTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DiagramOfficeTables(DiagramOfficeTable entity)
		{
			this.SendPropertyChanging();
			entity.OfficeTable = this;
		}
		
		private void detach_DiagramOfficeTables(DiagramOfficeTable entity)
		{
			this.SendPropertyChanging();
			entity.OfficeTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperatorTable")]
	public partial class OperatorTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _operator;
		
		private EntitySet<ComparisonTable> _ComparisonTables;
		
		private EntityRef<RangeTable> _RangeTable;
		
		private EntitySet<RangeTable> _RangeTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnoperatorChanging(string value);
    partial void OnoperatorChanged();
    #endregion
		
		public OperatorTable()
		{
			this._ComparisonTables = new EntitySet<ComparisonTable>(new Action<ComparisonTable>(this.attach_ComparisonTables), new Action<ComparisonTable>(this.detach_ComparisonTables));
			this._RangeTable = default(EntityRef<RangeTable>);
			this._RangeTables = new EntitySet<RangeTable>(new Action<RangeTable>(this.attach_RangeTables), new Action<RangeTable>(this.detach_RangeTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="operator", Storage="_operator", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string @operator
		{
			get
			{
				return this._operator;
			}
			set
			{
				if ((this._operator != value))
				{
					this.OnoperatorChanging(value);
					this.SendPropertyChanging();
					this._operator = value;
					this.SendPropertyChanged("@operator");
					this.OnoperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatorTable_ComparisonTable", Storage="_ComparisonTables", ThisKey="id", OtherKey="idComparisonOperator")]
		public EntitySet<ComparisonTable> ComparisonTables
		{
			get
			{
				return this._ComparisonTables;
			}
			set
			{
				this._ComparisonTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatorTable_RangeTable", Storage="_RangeTable", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public RangeTable RangeTable
		{
			get
			{
				return this._RangeTable.Entity;
			}
			set
			{
				RangeTable previousValue = this._RangeTable.Entity;
				if (((previousValue != value) 
							|| (this._RangeTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RangeTable.Entity = null;
						previousValue.OperatorTable = null;
					}
					this._RangeTable.Entity = value;
					if ((value != null))
					{
						value.OperatorTable = this;
					}
					this.SendPropertyChanged("RangeTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatorTable_RangeTable1", Storage="_RangeTables", ThisKey="id", OtherKey="idSecondComparisonOperator")]
		public EntitySet<RangeTable> RangeTables
		{
			get
			{
				return this._RangeTables;
			}
			set
			{
				this._RangeTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComparisonTables(ComparisonTable entity)
		{
			this.SendPropertyChanging();
			entity.OperatorTable = this;
		}
		
		private void detach_ComparisonTables(ComparisonTable entity)
		{
			this.SendPropertyChanging();
			entity.OperatorTable = null;
		}
		
		private void attach_RangeTables(RangeTable entity)
		{
			this.SendPropertyChanging();
			entity.OperatorTable1 = this;
		}
		
		private void detach_RangeTables(RangeTable entity)
		{
			this.SendPropertyChanging();
			entity.OperatorTable1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutcomeTable")]
	public partial class OutcomeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idElement;
		
		private string _outputType;
		
		private int _idExpression;
		
		private int _idNextElement;
		
		private EntityRef<ElementTable> _ElementTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidElementChanging(int value);
    partial void OnidElementChanged();
    partial void OnoutputTypeChanging(string value);
    partial void OnoutputTypeChanged();
    partial void OnidExpressionChanging(int value);
    partial void OnidExpressionChanged();
    partial void OnidNextElementChanging(int value);
    partial void OnidNextElementChanged();
    #endregion
		
		public OutcomeTable()
		{
			this._ElementTable = default(EntityRef<ElementTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._ElementTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idElement", DbType="Int NOT NULL")]
		public int idElement
		{
			get
			{
				return this._idElement;
			}
			set
			{
				if ((this._idElement != value))
				{
					this.OnidElementChanging(value);
					this.SendPropertyChanging();
					this._idElement = value;
					this.SendPropertyChanged("idElement");
					this.OnidElementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_outputType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string outputType
		{
			get
			{
				return this._outputType;
			}
			set
			{
				if ((this._outputType != value))
				{
					this.OnoutputTypeChanging(value);
					this.SendPropertyChanging();
					this._outputType = value;
					this.SendPropertyChanged("outputType");
					this.OnoutputTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idExpression", DbType="Int NOT NULL")]
		public int idExpression
		{
			get
			{
				return this._idExpression;
			}
			set
			{
				if ((this._idExpression != value))
				{
					this.OnidExpressionChanging(value);
					this.SendPropertyChanging();
					this._idExpression = value;
					this.SendPropertyChanged("idExpression");
					this.OnidExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idNextElement", DbType="Int NOT NULL")]
		public int idNextElement
		{
			get
			{
				return this._idNextElement;
			}
			set
			{
				if ((this._idNextElement != value))
				{
					this.OnidNextElementChanging(value);
					this.SendPropertyChanging();
					this._idNextElement = value;
					this.SendPropertyChanged("idNextElement");
					this.OnidNextElementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ElementTable_OutcomeTable", Storage="_ElementTable", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public ElementTable ElementTable
		{
			get
			{
				return this._ElementTable.Entity;
			}
			set
			{
				ElementTable previousValue = this._ElementTable.Entity;
				if (((previousValue != value) 
							|| (this._ElementTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElementTable.Entity = null;
						previousValue.OutcomeTable = null;
					}
					this._ElementTable.Entity = value;
					if ((value != null))
					{
						value.OutcomeTable = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("ElementTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RangeTable")]
	public partial class RangeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private decimal _firstKnownValue;
		
		private int _idFirstComparisonOperator;
		
		private decimal _unknownValue;
		
		private int _idSecondComparisonOperator;
		
		private decimal _secondKnownValue;
		
		private EntityRef<OperatorTable> _OperatorTable;
		
		private EntityRef<OperatorTable> _OperatorTable1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfirstKnownValueChanging(decimal value);
    partial void OnfirstKnownValueChanged();
    partial void OnidFirstComparisonOperatorChanging(int value);
    partial void OnidFirstComparisonOperatorChanged();
    partial void OnunknownValueChanging(decimal value);
    partial void OnunknownValueChanged();
    partial void OnidSecondComparisonOperatorChanging(int value);
    partial void OnidSecondComparisonOperatorChanged();
    partial void OnsecondKnownValueChanging(decimal value);
    partial void OnsecondKnownValueChanged();
    #endregion
		
		public RangeTable()
		{
			this._OperatorTable = default(EntityRef<OperatorTable>);
			this._OperatorTable1 = default(EntityRef<OperatorTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._OperatorTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstKnownValue", DbType="Decimal(18,2) NOT NULL")]
		public decimal firstKnownValue
		{
			get
			{
				return this._firstKnownValue;
			}
			set
			{
				if ((this._firstKnownValue != value))
				{
					this.OnfirstKnownValueChanging(value);
					this.SendPropertyChanging();
					this._firstKnownValue = value;
					this.SendPropertyChanged("firstKnownValue");
					this.OnfirstKnownValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFirstComparisonOperator", DbType="Int NOT NULL")]
		public int idFirstComparisonOperator
		{
			get
			{
				return this._idFirstComparisonOperator;
			}
			set
			{
				if ((this._idFirstComparisonOperator != value))
				{
					this.OnidFirstComparisonOperatorChanging(value);
					this.SendPropertyChanging();
					this._idFirstComparisonOperator = value;
					this.SendPropertyChanged("idFirstComparisonOperator");
					this.OnidFirstComparisonOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unknownValue", DbType="Decimal(18,2) NOT NULL")]
		public decimal unknownValue
		{
			get
			{
				return this._unknownValue;
			}
			set
			{
				if ((this._unknownValue != value))
				{
					this.OnunknownValueChanging(value);
					this.SendPropertyChanging();
					this._unknownValue = value;
					this.SendPropertyChanged("unknownValue");
					this.OnunknownValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSecondComparisonOperator", DbType="Int NOT NULL")]
		public int idSecondComparisonOperator
		{
			get
			{
				return this._idSecondComparisonOperator;
			}
			set
			{
				if ((this._idSecondComparisonOperator != value))
				{
					if (this._OperatorTable1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSecondComparisonOperatorChanging(value);
					this.SendPropertyChanging();
					this._idSecondComparisonOperator = value;
					this.SendPropertyChanged("idSecondComparisonOperator");
					this.OnidSecondComparisonOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_secondKnownValue", DbType="Decimal(18,2) NOT NULL")]
		public decimal secondKnownValue
		{
			get
			{
				return this._secondKnownValue;
			}
			set
			{
				if ((this._secondKnownValue != value))
				{
					this.OnsecondKnownValueChanging(value);
					this.SendPropertyChanging();
					this._secondKnownValue = value;
					this.SendPropertyChanged("secondKnownValue");
					this.OnsecondKnownValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatorTable_RangeTable", Storage="_OperatorTable", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public OperatorTable OperatorTable
		{
			get
			{
				return this._OperatorTable.Entity;
			}
			set
			{
				OperatorTable previousValue = this._OperatorTable.Entity;
				if (((previousValue != value) 
							|| (this._OperatorTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperatorTable.Entity = null;
						previousValue.RangeTable = null;
					}
					this._OperatorTable.Entity = value;
					if ((value != null))
					{
						value.RangeTable = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("OperatorTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatorTable_RangeTable1", Storage="_OperatorTable1", ThisKey="idSecondComparisonOperator", OtherKey="id", IsForeignKey=true)]
		public OperatorTable OperatorTable1
		{
			get
			{
				return this._OperatorTable1.Entity;
			}
			set
			{
				OperatorTable previousValue = this._OperatorTable1.Entity;
				if (((previousValue != value) 
							|| (this._OperatorTable1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperatorTable1.Entity = null;
						previousValue.RangeTables.Remove(this);
					}
					this._OperatorTable1.Entity = value;
					if ((value != null))
					{
						value.RangeTables.Add(this);
						this._idSecondComparisonOperator = value.id;
					}
					else
					{
						this._idSecondComparisonOperator = default(int);
					}
					this.SendPropertyChanged("OperatorTable1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExpressionTypeTable")]
	public partial class ExpressionTypeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _expressionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnexpressionTypeChanging(string value);
    partial void OnexpressionTypeChanged();
    #endregion
		
		public ExpressionTypeTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expressionType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string expressionType
		{
			get
			{
				return this._expressionType;
			}
			set
			{
				if ((this._expressionType != value))
				{
					this.OnexpressionTypeChanging(value);
					this.SendPropertyChanging();
					this._expressionType = value;
					this.SendPropertyChanged("expressionType");
					this.OnexpressionTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlphabheticBooleanTable")]
	public partial class AlphabheticBooleanTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public AlphabheticBooleanTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NumericValueTable")]
	public partial class NumericValueTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _numValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnumValueChanging(int value);
    partial void OnnumValueChanged();
    #endregion
		
		public NumericValueTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numValue", DbType="Int NOT NULL")]
		public int numValue
		{
			get
			{
				return this._numValue;
			}
			set
			{
				if ((this._numValue != value))
				{
					this.OnnumValueChanging(value);
					this.SendPropertyChanging();
					this._numValue = value;
					this.SendPropertyChanged("numValue");
					this.OnnumValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResultsTable")]
	public partial class ResultsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Pregunta;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPreguntaChanging(string value);
    partial void OnPreguntaChanged();
    #endregion
		
		public ResultsTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pregunta", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Pregunta
		{
			get
			{
				return this._Pregunta;
			}
			set
			{
				if ((this._Pregunta != value))
				{
					this.OnPreguntaChanging(value);
					this.SendPropertyChanging();
					this._Pregunta = value;
					this.SendPropertyChanged("Pregunta");
					this.OnPreguntaChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionTable")]
	public partial class QuestionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Pregunta;
		
		private string _Categoria;
		
		private string _SubCategoria;
		
		private EntitySet<ElementTable> _ElementTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPreguntaChanging(string value);
    partial void OnPreguntaChanged();
    partial void OnCategoriaChanging(string value);
    partial void OnCategoriaChanged();
    partial void OnSubCategoriaChanging(string value);
    partial void OnSubCategoriaChanged();
    #endregion
		
		public QuestionTable()
		{
			this._ElementTables = new EntitySet<ElementTable>(new Action<ElementTable>(this.attach_ElementTables), new Action<ElementTable>(this.detach_ElementTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pregunta", DbType="VarChar(255)")]
		public string Pregunta
		{
			get
			{
				return this._Pregunta;
			}
			set
			{
				if ((this._Pregunta != value))
				{
					this.OnPreguntaChanging(value);
					this.SendPropertyChanging();
					this._Pregunta = value;
					this.SendPropertyChanged("Pregunta");
					this.OnPreguntaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Categoria", DbType="VarChar(255)")]
		public string Categoria
		{
			get
			{
				return this._Categoria;
			}
			set
			{
				if ((this._Categoria != value))
				{
					this.OnCategoriaChanging(value);
					this.SendPropertyChanging();
					this._Categoria = value;
					this.SendPropertyChanged("Categoria");
					this.OnCategoriaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoria", DbType="VarChar(255)")]
		public string SubCategoria
		{
			get
			{
				return this._SubCategoria;
			}
			set
			{
				if ((this._SubCategoria != value))
				{
					this.OnSubCategoriaChanging(value);
					this.SendPropertyChanging();
					this._SubCategoria = value;
					this.SendPropertyChanged("SubCategoria");
					this.OnSubCategoriaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionTable_ElementTable", Storage="_ElementTables", ThisKey="Id", OtherKey="idPregunta")]
		public EntitySet<ElementTable> ElementTables
		{
			get
			{
				return this._ElementTables;
			}
			set
			{
				this._ElementTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ElementTables(ElementTable entity)
		{
			this.SendPropertyChanging();
			entity.QuestionTable = this;
		}
		
		private void detach_ElementTables(ElementTable entity)
		{
			this.SendPropertyChanging();
			entity.QuestionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiagramTable")]
	public partial class DiagramTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<ElementTable> _ElementTables;
		
		private EntitySet<DiagramOfficeTable> _DiagramOfficeTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public DiagramTable()
		{
			this._ElementTables = new EntitySet<ElementTable>(new Action<ElementTable>(this.attach_ElementTables), new Action<ElementTable>(this.detach_ElementTables));
			this._DiagramOfficeTables = new EntitySet<DiagramOfficeTable>(new Action<DiagramOfficeTable>(this.attach_DiagramOfficeTables), new Action<DiagramOfficeTable>(this.detach_DiagramOfficeTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DiagramTable_ElementTable", Storage="_ElementTables", ThisKey="id", OtherKey="idDiagram")]
		public EntitySet<ElementTable> ElementTables
		{
			get
			{
				return this._ElementTables;
			}
			set
			{
				this._ElementTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DiagramTable_DiagramOfficeTable", Storage="_DiagramOfficeTables", ThisKey="id", OtherKey="idDiagram")]
		public EntitySet<DiagramOfficeTable> DiagramOfficeTables
		{
			get
			{
				return this._DiagramOfficeTables;
			}
			set
			{
				this._DiagramOfficeTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ElementTables(ElementTable entity)
		{
			this.SendPropertyChanging();
			entity.DiagramTable = this;
		}
		
		private void detach_ElementTables(ElementTable entity)
		{
			this.SendPropertyChanging();
			entity.DiagramTable = null;
		}
		
		private void attach_DiagramOfficeTables(DiagramOfficeTable entity)
		{
			this.SendPropertyChanging();
			entity.DiagramTable = this;
		}
		
		private void detach_DiagramOfficeTables(DiagramOfficeTable entity)
		{
			this.SendPropertyChanging();
			entity.DiagramTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiagramOfficeTable")]
	public partial class DiagramOfficeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idDiagram;
		
		private string _idOffice;
		
		private EntityRef<DiagramTable> _DiagramTable;
		
		private EntityRef<OfficeTable> _OfficeTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidDiagramChanging(int value);
    partial void OnidDiagramChanged();
    partial void OnidOfficeChanging(string value);
    partial void OnidOfficeChanged();
    #endregion
		
		public DiagramOfficeTable()
		{
			this._DiagramTable = default(EntityRef<DiagramTable>);
			this._OfficeTable = default(EntityRef<OfficeTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDiagram", DbType="Int NOT NULL")]
		public int idDiagram
		{
			get
			{
				return this._idDiagram;
			}
			set
			{
				if ((this._idDiagram != value))
				{
					if (this._DiagramTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDiagramChanging(value);
					this.SendPropertyChanging();
					this._idDiagram = value;
					this.SendPropertyChanged("idDiagram");
					this.OnidDiagramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOffice", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string idOffice
		{
			get
			{
				return this._idOffice;
			}
			set
			{
				if ((this._idOffice != value))
				{
					if (this._OfficeTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOfficeChanging(value);
					this.SendPropertyChanging();
					this._idOffice = value;
					this.SendPropertyChanged("idOffice");
					this.OnidOfficeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DiagramTable_DiagramOfficeTable", Storage="_DiagramTable", ThisKey="idDiagram", OtherKey="id", IsForeignKey=true)]
		public DiagramTable DiagramTable
		{
			get
			{
				return this._DiagramTable.Entity;
			}
			set
			{
				DiagramTable previousValue = this._DiagramTable.Entity;
				if (((previousValue != value) 
							|| (this._DiagramTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DiagramTable.Entity = null;
						previousValue.DiagramOfficeTables.Remove(this);
					}
					this._DiagramTable.Entity = value;
					if ((value != null))
					{
						value.DiagramOfficeTables.Add(this);
						this._idDiagram = value.id;
					}
					else
					{
						this._idDiagram = default(int);
					}
					this.SendPropertyChanged("DiagramTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OfficeTable_DiagramOfficeTable", Storage="_OfficeTable", ThisKey="idOffice", OtherKey="IdOficina", IsForeignKey=true)]
		public OfficeTable OfficeTable
		{
			get
			{
				return this._OfficeTable.Entity;
			}
			set
			{
				OfficeTable previousValue = this._OfficeTable.Entity;
				if (((previousValue != value) 
							|| (this._OfficeTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OfficeTable.Entity = null;
						previousValue.DiagramOfficeTables.Remove(this);
					}
					this._OfficeTable.Entity = value;
					if ((value != null))
					{
						value.DiagramOfficeTables.Add(this);
						this._idOffice = value.IdOficina;
					}
					else
					{
						this._idOffice = default(string);
					}
					this.SendPropertyChanged("OfficeTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogException")]
	public partial class LogException : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogId;
		
		private System.DateTime _ErrorDate;
		
		private string _ErrorShortDescription;
		
		private string _ExceptionType;
		
		private string _FileName;
		
		private System.Nullable<int> _LineNumber;
		
		private string _MethodName;
		
		private string _ClassName;
		
		private string _ImpactLevel;
		
		private string _ApplicationName;
		
		private string _ErrorMessage;
		
		private string _StackTrace;
		
		private string _InnerException;
		
		private string _InnerExceptionMessage;
		
		private string _IpAddress;
		
		private bool _IsProduction;
		
		private System.DateTime _LastModified;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(int value);
    partial void OnLogIdChanged();
    partial void OnErrorDateChanging(System.DateTime value);
    partial void OnErrorDateChanged();
    partial void OnErrorShortDescriptionChanging(string value);
    partial void OnErrorShortDescriptionChanged();
    partial void OnExceptionTypeChanging(string value);
    partial void OnExceptionTypeChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnLineNumberChanging(System.Nullable<int> value);
    partial void OnLineNumberChanged();
    partial void OnMethodNameChanging(string value);
    partial void OnMethodNameChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnImpactLevelChanging(string value);
    partial void OnImpactLevelChanged();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    partial void OnInnerExceptionChanging(string value);
    partial void OnInnerExceptionChanged();
    partial void OnInnerExceptionMessageChanging(string value);
    partial void OnInnerExceptionMessageChanged();
    partial void OnIpAddressChanging(string value);
    partial void OnIpAddressChanged();
    partial void OnIsProductionChanging(bool value);
    partial void OnIsProductionChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    #endregion
		
		public LogException()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorDate", DbType="DateTime NOT NULL")]
		public System.DateTime ErrorDate
		{
			get
			{
				return this._ErrorDate;
			}
			set
			{
				if ((this._ErrorDate != value))
				{
					this.OnErrorDateChanging(value);
					this.SendPropertyChanging();
					this._ErrorDate = value;
					this.SendPropertyChanged("ErrorDate");
					this.OnErrorDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorShortDescription", DbType="VarChar(1000)")]
		public string ErrorShortDescription
		{
			get
			{
				return this._ErrorShortDescription;
			}
			set
			{
				if ((this._ErrorShortDescription != value))
				{
					this.OnErrorShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ErrorShortDescription = value;
					this.SendPropertyChanged("ErrorShortDescription");
					this.OnErrorShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExceptionType", DbType="VarChar(255)")]
		public string ExceptionType
		{
			get
			{
				return this._ExceptionType;
			}
			set
			{
				if ((this._ExceptionType != value))
				{
					this.OnExceptionTypeChanging(value);
					this.SendPropertyChanging();
					this._ExceptionType = value;
					this.SendPropertyChanged("ExceptionType");
					this.OnExceptionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(1000)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNumber", DbType="Int")]
		public System.Nullable<int> LineNumber
		{
			get
			{
				return this._LineNumber;
			}
			set
			{
				if ((this._LineNumber != value))
				{
					this.OnLineNumberChanging(value);
					this.SendPropertyChanging();
					this._LineNumber = value;
					this.SendPropertyChanged("LineNumber");
					this.OnLineNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethodName", DbType="VarChar(255)")]
		public string MethodName
		{
			get
			{
				return this._MethodName;
			}
			set
			{
				if ((this._MethodName != value))
				{
					this.OnMethodNameChanging(value);
					this.SendPropertyChanging();
					this._MethodName = value;
					this.SendPropertyChanged("MethodName");
					this.OnMethodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="VarChar(150)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImpactLevel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ImpactLevel
		{
			get
			{
				return this._ImpactLevel;
			}
			set
			{
				if ((this._ImpactLevel != value))
				{
					this.OnImpactLevelChanging(value);
					this.SendPropertyChanging();
					this._ImpactLevel = value;
					this.SendPropertyChanged("ImpactLevel");
					this.OnImpactLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationName", DbType="VarChar(255)")]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="VarChar(4000)")]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="VarChar(MAX)")]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InnerException", DbType="VarChar(2000)")]
		public string InnerException
		{
			get
			{
				return this._InnerException;
			}
			set
			{
				if ((this._InnerException != value))
				{
					this.OnInnerExceptionChanging(value);
					this.SendPropertyChanging();
					this._InnerException = value;
					this.SendPropertyChanged("InnerException");
					this.OnInnerExceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InnerExceptionMessage", DbType="VarChar(2000)")]
		public string InnerExceptionMessage
		{
			get
			{
				return this._InnerExceptionMessage;
			}
			set
			{
				if ((this._InnerExceptionMessage != value))
				{
					this.OnInnerExceptionMessageChanging(value);
					this.SendPropertyChanging();
					this._InnerExceptionMessage = value;
					this.SendPropertyChanged("InnerExceptionMessage");
					this.OnInnerExceptionMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpAddress", DbType="VarChar(150)")]
		public string IpAddress
		{
			get
			{
				return this._IpAddress;
			}
			set
			{
				if ((this._IpAddress != value))
				{
					this.OnIpAddressChanging(value);
					this.SendPropertyChanging();
					this._IpAddress = value;
					this.SendPropertyChanged("IpAddress");
					this.OnIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProduction", DbType="Bit NOT NULL")]
		public bool IsProduction
		{
			get
			{
				return this._IsProduction;
			}
			set
			{
				if ((this._IsProduction != value))
				{
					this.OnIsProductionChanging(value);
					this.SendPropertyChanging();
					this._IsProduction = value;
					this.SendPropertyChanged("IsProduction");
					this.OnIsProductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperationLog")]
	public partial class OperationLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _operationDate;
		
		private string _operationType;
		
		private string _operationMessage;
		
		private string _methodName;
		
		private string _className;
		
		private string _addressIP;
		
		private string _userOS;
		
		private string _FileName;
		
		private int _LineNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnoperationDateChanging(System.DateTime value);
    partial void OnoperationDateChanged();
    partial void OnoperationTypeChanging(string value);
    partial void OnoperationTypeChanged();
    partial void OnoperationMessageChanging(string value);
    partial void OnoperationMessageChanged();
    partial void OnmethodNameChanging(string value);
    partial void OnmethodNameChanged();
    partial void OnclassNameChanging(string value);
    partial void OnclassNameChanged();
    partial void OnaddressIPChanging(string value);
    partial void OnaddressIPChanged();
    partial void OnuserOSChanging(string value);
    partial void OnuserOSChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnLineNumberChanging(int value);
    partial void OnLineNumberChanged();
    #endregion
		
		public OperationLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operationDate", DbType="DateTime NOT NULL")]
		public System.DateTime operationDate
		{
			get
			{
				return this._operationDate;
			}
			set
			{
				if ((this._operationDate != value))
				{
					this.OnoperationDateChanging(value);
					this.SendPropertyChanging();
					this._operationDate = value;
					this.SendPropertyChanged("operationDate");
					this.OnoperationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operationType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string operationType
		{
			get
			{
				return this._operationType;
			}
			set
			{
				if ((this._operationType != value))
				{
					this.OnoperationTypeChanging(value);
					this.SendPropertyChanging();
					this._operationType = value;
					this.SendPropertyChanged("operationType");
					this.OnoperationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operationMessage", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string operationMessage
		{
			get
			{
				return this._operationMessage;
			}
			set
			{
				if ((this._operationMessage != value))
				{
					this.OnoperationMessageChanging(value);
					this.SendPropertyChanging();
					this._operationMessage = value;
					this.SendPropertyChanged("operationMessage");
					this.OnoperationMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_methodName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string methodName
		{
			get
			{
				return this._methodName;
			}
			set
			{
				if ((this._methodName != value))
				{
					this.OnmethodNameChanging(value);
					this.SendPropertyChanging();
					this._methodName = value;
					this.SendPropertyChanged("methodName");
					this.OnmethodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_className", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string className
		{
			get
			{
				return this._className;
			}
			set
			{
				if ((this._className != value))
				{
					this.OnclassNameChanging(value);
					this.SendPropertyChanging();
					this._className = value;
					this.SendPropertyChanged("className");
					this.OnclassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressIP", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string addressIP
		{
			get
			{
				return this._addressIP;
			}
			set
			{
				if ((this._addressIP != value))
				{
					this.OnaddressIPChanging(value);
					this.SendPropertyChanging();
					this._addressIP = value;
					this.SendPropertyChanged("addressIP");
					this.OnaddressIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userOS", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string userOS
		{
			get
			{
				return this._userOS;
			}
			set
			{
				if ((this._userOS != value))
				{
					this.OnuserOSChanging(value);
					this.SendPropertyChanging();
					this._userOS = value;
					this.SendPropertyChanged("userOS");
					this.OnuserOSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNumber", DbType="Int NOT NULL")]
		public int LineNumber
		{
			get
			{
				return this._LineNumber;
			}
			set
			{
				if ((this._LineNumber != value))
				{
					this.OnLineNumberChanging(value);
					this.SendPropertyChanging();
					this._LineNumber = value;
					this.SendPropertyChanged("LineNumber");
					this.OnLineNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoricTable")]
	public partial class HistoricTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _idOficina;
		
		private string _NombreOficina;
		
		private System.Nullable<int> _idDiagram;
		
		private System.Nullable<int> _idElement;
		
		private System.Nullable<int> _idPregunta;
		
		private string _Pregunta;
		
		private string _CategoriaElemento;
		
		private string _ResultadoElemento;
		
		private System.Nullable<int> _idOutcome;
		
		private string _valueOutput;
		
		private System.Nullable<System.DateTime> _date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidOficinaChanging(string value);
    partial void OnidOficinaChanged();
    partial void OnNombreOficinaChanging(string value);
    partial void OnNombreOficinaChanged();
    partial void OnidDiagramChanging(System.Nullable<int> value);
    partial void OnidDiagramChanged();
    partial void OnidElementChanging(System.Nullable<int> value);
    partial void OnidElementChanged();
    partial void OnidPreguntaChanging(System.Nullable<int> value);
    partial void OnidPreguntaChanged();
    partial void OnPreguntaChanging(string value);
    partial void OnPreguntaChanged();
    partial void OnCategoriaElementoChanging(string value);
    partial void OnCategoriaElementoChanged();
    partial void OnResultadoElementoChanging(string value);
    partial void OnResultadoElementoChanged();
    partial void OnidOutcomeChanging(System.Nullable<int> value);
    partial void OnidOutcomeChanged();
    partial void OnvalueOutputChanging(string value);
    partial void OnvalueOutputChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    #endregion
		
		public HistoricTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOficina", DbType="VarChar(10)")]
		public string idOficina
		{
			get
			{
				return this._idOficina;
			}
			set
			{
				if ((this._idOficina != value))
				{
					this.OnidOficinaChanging(value);
					this.SendPropertyChanging();
					this._idOficina = value;
					this.SendPropertyChanged("idOficina");
					this.OnidOficinaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NombreOficina", DbType="NVarChar(255)")]
		public string NombreOficina
		{
			get
			{
				return this._NombreOficina;
			}
			set
			{
				if ((this._NombreOficina != value))
				{
					this.OnNombreOficinaChanging(value);
					this.SendPropertyChanging();
					this._NombreOficina = value;
					this.SendPropertyChanged("NombreOficina");
					this.OnNombreOficinaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDiagram", DbType="Int")]
		public System.Nullable<int> idDiagram
		{
			get
			{
				return this._idDiagram;
			}
			set
			{
				if ((this._idDiagram != value))
				{
					this.OnidDiagramChanging(value);
					this.SendPropertyChanging();
					this._idDiagram = value;
					this.SendPropertyChanged("idDiagram");
					this.OnidDiagramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idElement", DbType="Int")]
		public System.Nullable<int> idElement
		{
			get
			{
				return this._idElement;
			}
			set
			{
				if ((this._idElement != value))
				{
					this.OnidElementChanging(value);
					this.SendPropertyChanging();
					this._idElement = value;
					this.SendPropertyChanged("idElement");
					this.OnidElementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPregunta", DbType="Int")]
		public System.Nullable<int> idPregunta
		{
			get
			{
				return this._idPregunta;
			}
			set
			{
				if ((this._idPregunta != value))
				{
					this.OnidPreguntaChanging(value);
					this.SendPropertyChanging();
					this._idPregunta = value;
					this.SendPropertyChanged("idPregunta");
					this.OnidPreguntaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pregunta", DbType="NVarChar(255)")]
		public string Pregunta
		{
			get
			{
				return this._Pregunta;
			}
			set
			{
				if ((this._Pregunta != value))
				{
					this.OnPreguntaChanging(value);
					this.SendPropertyChanging();
					this._Pregunta = value;
					this.SendPropertyChanged("Pregunta");
					this.OnPreguntaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoriaElemento", DbType="NVarChar(255)")]
		public string CategoriaElemento
		{
			get
			{
				return this._CategoriaElemento;
			}
			set
			{
				if ((this._CategoriaElemento != value))
				{
					this.OnCategoriaElementoChanging(value);
					this.SendPropertyChanging();
					this._CategoriaElemento = value;
					this.SendPropertyChanged("CategoriaElemento");
					this.OnCategoriaElementoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultadoElemento", DbType="NVarChar(2555)")]
		public string ResultadoElemento
		{
			get
			{
				return this._ResultadoElemento;
			}
			set
			{
				if ((this._ResultadoElemento != value))
				{
					this.OnResultadoElementoChanging(value);
					this.SendPropertyChanging();
					this._ResultadoElemento = value;
					this.SendPropertyChanged("ResultadoElemento");
					this.OnResultadoElementoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOutcome", DbType="Int")]
		public System.Nullable<int> idOutcome
		{
			get
			{
				return this._idOutcome;
			}
			set
			{
				if ((this._idOutcome != value))
				{
					this.OnidOutcomeChanging(value);
					this.SendPropertyChanging();
					this._idOutcome = value;
					this.SendPropertyChanged("idOutcome");
					this.OnidOutcomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_valueOutput", DbType="NVarChar(255)")]
		public string valueOutput
		{
			get
			{
				return this._valueOutput;
			}
			set
			{
				if ((this._valueOutput != value))
				{
					this.OnvalueOutputChanging(value);
					this.SendPropertyChanging();
					this._valueOutput = value;
					this.SendPropertyChanged("valueOutput");
					this.OnvalueOutputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
